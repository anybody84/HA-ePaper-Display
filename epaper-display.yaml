substitutions:
  device_name: "wyswietlacz_paper"

# Core
esphome:
  name: "${device_name}"
  platform: ESP8266
  board: esp01_1m
  on_boot:
    priority: -10
    then:
      - delay: 10s
      - component.update: epaperdisplay

# WiFi
wifi:
  networks:
  - ssid: !secret wifi_ssid
    password: !secret wifi_password
  - ssid: !secret wifi_ssid_iot
    password: !secret wifi_password
  ap:
    ssid: ${device_name}
    password: !secret wifi_password


# Captive portal
captive_portal:

# Enable logging
logger:
  level: VERY_VERBOSE

# API
api:

# OTA
ota:
  password: !secret ota_password

# Switch
switch:
  - platform: restart
    name: "${device_name} Restart"

# Text Sensors
text_sensor:
  - platform: wifi_info
    ip_address:
      name: '${device_name} IP Address'
      icon: mdi:ip

# Web server
web_server:
  port: 80
  auth:
    username: pawel
    password: !secret ota_password

font:

  - file: 'fonts/Roboto-Medium.ttf'
    id: roboto_med_30
    size: 30
  - file: 'fonts/Roboto-Regular.ttf'
    id: footer_font
    size: 15
    glyphs:
      ['&', '@', '!', ',', '.', '"', '%', '(', ')', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z','å', 'ä', 'ö', '/','º','µ','³']

  - file: 'fonts/Roboto-Regular.ttf'
    id: main_sensor_unit
    size: 20
    glyphs:
      ['&', '@', '!', ',', '.', '"', '%', '(', ')', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z','å', 'ä', 'ö', '/','º','µ','³']
       
  - file: 'fonts/Roboto-Medium.ttf'
    id: sub_sensor_font
    size: 30
    glyphs:
      ['&', '@', '!', ',', '.', '"', '%', '(', ')', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z','å', 'ä', 'ö', '/','º','µ','³']
  
  - file: 'fonts/Roboto-Bold.ttf'
    id: main_sensor_font
    size: 80
  
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id:  mdi_small
    size: 31
    glyphs: [
      # Wifi
      '󰤫', # mdi-wifi-strength-alert-outline
      '󰤟', # mdi-wifi-strength-1
      '󰤢', # mdi-wifi-strength-2
      '󰤥', # mdi-wifi-strength-3
      '󰤨', # mdi-wifi-strength-4
      '󰔏', # mdi-themometer
      '󰖎' # mdi-water-percent
      ]

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id:  mdi_wifi
    size: 20
    glyphs: [
      # Wifi
      '󰤫', # mdi-wifi-strength-alert-outline
      '󰤟', # mdi-wifi-strength-1
      '󰤢', # mdi-wifi-strength-2
      '󰤥', # mdi-wifi-strength-3
      '󰤨'  # mdi-wifi-strength-4

      ]

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id:  mdi_med
    size: 33
    glyphs: [
      # Wifi
      '󰤫', # mdi-wifi-strength-alert-outline
      '󰤟', # mdi-wifi-strength-1
      '󰤢', # mdi-wifi-strength-2
      '󰤥', # mdi-wifi-strength-3
      '󰤨', # mdi-wifi-strength-4
      '󰀦' # mdi-alert
      ]

# Time
time:
  - platform: homeassistant
    id: homeassistant_time

#Please edit your homeassistant sensors enitity id to match yours
sensor:
  - platform: homeassistant
    entity_id: sensor.airly_pm2_5
    id: pm25_indoor

  - platform: homeassistant
    entity_id: sensor.mediana_temperatury
    id: temp_indoor
  
  - platform: homeassistant
    entity_id: sensor.salon_atmo_humi
    id: humid_indoor
  
  - platform: homeassistant
    entity_id: sensor.real_outside_temp
    id: temp_outdoor
  
  - platform: homeassistant
    entity_id: sensor.meteo_pole_humi
    id: humid_outdoor
  
  - platform: homeassistant
    entity_id: sensor.airly_pm2_5
    id: pm25_outdoor

  - platform: wifi_signal
    name: '${device_name} WiFi Signal'
    id: wifisignal
    update_interval: 60s
    
spi:
  clk_pin: 14
  mosi_pin: 13  #DIN
  
display:
  - platform: waveshare_epaper
    id: epaperdisplay
    cs_pin: 15
    dc_pin: 12
    update_interval: 60s
    busy_pin: 16
    reset_pin: 4
    model: 4.20in
    lambda: |-
      
      int pm25_danger_thres = 40;
    
      float outdoor_temp = id(temp_outdoor).state;
      int outdoor_humid = int(id(humid_outdoor).state);
      int outdoor_pm25 = int(id(pm25_outdoor).state);
      float indoor_temp = id(temp_indoor).state;
      int indoor_humid = int(id(humid_indoor).state);
      int indoor_pm25 = int(id(pm25_indoor).state);

  

      /* OUTSIDE */
      it.print(10, 10, id(main_sensor_unit), "OUTSIDE");
      it.filled_rectangle(98, 21, 285, 3);
      it.print(10, 114, id(main_sensor_unit), TextAlign::BASELINE_LEFT, "PM2.5");
      it.print(375, 75,  id(mdi_small), TextAlign::BASELINE_CENTER, "󰔏"); //thermometer
      it.print(375, 115, id(mdi_small), TextAlign::BASELINE_CENTER, "󰖎"); //water-percent

      if(outdoor_temp > -100 && outdoor_temp < 100){
        it.printf(357, 75, id(sub_sensor_font), TextAlign::BASELINE_RIGHT , "%2.1fºc",outdoor_temp);
      }else{
        it.print(357, 75, id(sub_sensor_font), TextAlign::BASELINE_RIGHT , " - ºc");
      }

      if(outdoor_humid >=0 && outdoor_humid <= 100){
        it.printf(357, 115, id(sub_sensor_font), TextAlign::BASELINE_RIGHT , "%3d%%", outdoor_humid);
      }else{
        it.print(357, 115, id(sub_sensor_font), TextAlign::BASELINE_RIGHT , " -  %");
      }



      if(outdoor_pm25 < 255 && outdoor_pm25 >=0){    //Has valid value
        if (outdoor_pm25 > 99){
          it.printf(205, 114, id(main_sensor_font), TextAlign::BASELINE_RIGHT , "%3d", outdoor_pm25);
          it.print(210, 114, id(main_sensor_unit),TextAlign::BASELINE_LEFT, "µg/m³");
        }else{
          it.printf(175, 114, id(main_sensor_font), TextAlign::BASELINE_RIGHT , "%2d", outdoor_pm25);
          it.print(180, 114, id(main_sensor_unit),TextAlign::BASELINE_LEFT, "µg/m³");
        }

        if(outdoor_pm25 >= pm25_danger_thres){
          it.print(37, 87, id(mdi_med), TextAlign::BASELINE_CENTER, "󰀦"); //warning
        }
      }
      else{                             //Invalid or error value
        it.print(175, 114, id(main_sensor_font), TextAlign::BASELINE_RIGHT , "- ");
        it.print(180, 114, id(main_sensor_unit),TextAlign::BASELINE_LEFT, "µg/m³");
      }

      /* INSIDE */

      int offsetY = 137;
      it.print(10, 10 + offsetY, id(main_sensor_unit), "INSIDE");
      it.filled_rectangle(78, 21 + offsetY, 305, 3);
      it.print(10, 114 + offsetY, id(main_sensor_unit), TextAlign::BASELINE_LEFT, "PM2.5");
      it.print(375, 75 + offsetY,  id(mdi_small), TextAlign::BASELINE_CENTER, "󰔏"); //thermometer
      it.print(375, 115 + offsetY, id(mdi_small), TextAlign::BASELINE_CENTER, "󰖎"); //water-percent

      if(indoor_temp > -100 && indoor_temp < 100){
        it.printf(357, 75 + offsetY, id(sub_sensor_font), TextAlign::BASELINE_RIGHT , "%2.1fºc", indoor_temp);
      }else{
        it.print(357, 75 + offsetY, id(sub_sensor_font), TextAlign::BASELINE_RIGHT , " - ºc");
      }

      if(indoor_humid >=0 && indoor_humid <= 100){
        it.printf(357, 115 + offsetY, id(sub_sensor_font), TextAlign::BASELINE_RIGHT , "%3d%%", indoor_humid);
      }else{
        it.print(357, 115 + offsetY, id(sub_sensor_font), TextAlign::BASELINE_RIGHT , " -  %");
      }


      if(indoor_pm25 < 255 && indoor_pm25 >=0){
        if (indoor_pm25 > 99){
          it.printf(205, 114 + offsetY, id(main_sensor_font), TextAlign::BASELINE_RIGHT , "%3d", indoor_pm25);
          it.print(210, 114 + offsetY, id(main_sensor_unit),TextAlign::BASELINE_LEFT, "µg/m³");
        }else{
          it.printf(175, 114 + offsetY, id(main_sensor_font), TextAlign::BASELINE_RIGHT , "%2d", indoor_pm25);
          it.print(180, 114 + offsetY, id(main_sensor_unit),TextAlign::BASELINE_LEFT, "µg/m³");
        }

        if(indoor_pm25 >= pm25_danger_thres){
          it.print(37, 87 + offsetY, id(mdi_med), TextAlign::BASELINE_CENTER, "󰀦"); //warning
        }

      }
      else{
        it.print(175, 114 + offsetY, id(main_sensor_font), TextAlign::BASELINE_RIGHT , "- ");
        it.print(180, 114 + offsetY, id(main_sensor_unit),TextAlign::BASELINE_LEFT, "µg/m³");
      } 


      
      /* FOOTERT */
      it.strftime(355, 295 , id(footer_font), TextAlign::BASELINE_RIGHT , "Updated at %d/%b/%Y %H:%M", id(homeassistant_time).now());
      
      /* WiFi Signal Strenght */
      if(id(wifisignal).has_state()) {
        int x = 375;
        int y = 295;
        if (id(wifisignal).state >= -50) {
            //Excellent
            it.print(x, y, id(mdi_wifi), TextAlign::BASELINE_CENTER, "󰤨");
            ESP_LOGI("WiFi", "Exellent");
        } else if (id(wifisignal).state  >= -60) {
            //Good
            it.print(x, y, id(mdi_wifi), TextAlign::BASELINE_CENTER, "󰤥");
            ESP_LOGI("WiFi", "Good");
        } else if (id(wifisignal).state  >= -75) {
            //Fair
            it.print(x, y, id(mdi_wifi), TextAlign::BASELINE_CENTER, "󰤢");
            ESP_LOGI("WiFi", "Fair");
        } else if (id(wifisignal).state  >= -100) {
            //Weak
            it.print(x, y, id(mdi_wifi), TextAlign::BASELINE_CENTER, "󰤟");
            ESP_LOGI("WiFi", "Weak");
        } else {
            //Unlikely working signal
            it.print(x, y, id(mdi_wifi), TextAlign::BASELINE_CENTER, "󰤫");
            ESP_LOGI("WiFi", "Unlikely");
        }
      }


